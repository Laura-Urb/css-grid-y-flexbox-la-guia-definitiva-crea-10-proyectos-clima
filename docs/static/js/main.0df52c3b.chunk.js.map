{"version":3,"sources":["components/Header.js","components/Error.js","components/Formulario.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Error","mensaje","Formulario","busqueda","setBusqueda","setConsultar","ciudad","pais","useState","error","setError","handleChange","e","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Clima","resultado","main","parseFloat","temp","toFixed","temp_max","temp_min","App","componente","consultar","setResultado","useEffect","a","url","fetch","respuesta","json","cod","consultarAPI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0df52c3b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Header = ({ titulo }) => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper light-blue darken-2\">\r\n        <a href=\"#!\" className=\"brand-logo\">\r\n          {titulo}\r\n        </a>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  titulo: PropTypes.string.isRequired\r\n};\r\n\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Error = ({ mensaje }) => {\r\n  return <p className=\"red darken-4 error\">{mensaje}</p>;\r\n};\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Error;\r\n","import React, { useState } from \"react\";\r\nimport Error from \"./Error\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Formulario = ({ busqueda, setBusqueda, setConsultar }) => {\r\n  const { ciudad, pais } = busqueda;\r\n\r\n  const [error, setError] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    setBusqueda({ ...busqueda, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (ciudad.trim() === \"\" || pais.trim() === \"\") {\r\n      setError(true);\r\n      return;\r\n    }\r\n    setError(false);\r\n\r\n    setConsultar(true);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {error ? <Error mensaje=\"Ambos campos son obligatorios\"></Error> : null}\r\n      <div className=\"input-field col s12\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"ciudad\"\r\n          id=\"ciudad\"\r\n          value={ciudad}\r\n          onChange={handleChange}\r\n        ></input>\r\n        <label htmlFor=\"ciudad\">Ciudad: </label>\r\n      </div>\r\n      <div className=\"input-field col s12\">\r\n        <select name=\"pais\" id=\"pais\" value={pais} onChange={handleChange}>\r\n          <option value=\"\">Selecciona un país</option>\r\n          <option value=\"US\">Estados Unidos</option>\r\n          <option value=\"MX\">México</option>\r\n          <option value=\"AR\">Argentina</option>\r\n          <option value=\"CO\">Colombia</option>\r\n          <option value=\"CR\">Costa Rica</option>\r\n          <option value=\"ES\">España</option>\r\n          <option value=\"PE\">Perú</option>\r\n        </select>\r\n        <label htmlFor=\"pais\">País: </label>\r\n      </div>\r\n      <div className=\"input-field col s12\">\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Buscar Clima\"\r\n          className=\"waves-effect waves-light btn-large btn-black yellow accent-4\"\r\n        ></input>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nFormulario.propTypes = {\r\n  busqueda: PropTypes.object.isRequired,\r\n  setBusqueda: PropTypes.func.isRequired,\r\n  setConsultar: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Formulario;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Clima = ({ resultado }) => {\r\n  const { name, main } = resultado;\r\n\r\n  if (!name) return null;\r\n\r\n  //Grados Kelvin\r\n  const kelvin = 273.15;\r\n\r\n  return (\r\n    <div className=\"card-panel white col s12\">\r\n      <div className=\"black-text\">\r\n        <h2>El clima de {name} es: </h2>\r\n        <p className=\"temperatura\">\r\n          {parseFloat(main.temp - kelvin, 10).toFixed(2)} <span>&#x2103;</span>\r\n        </p>\r\n        <p>Temperatura Máxima\r\n           {parseFloat(main.temp_max - kelvin, 10).toFixed(2)} <span>&#x2103;</span>\r\n        </p>\r\n        <p>Temperatura Mínima\r\n           {parseFloat(main.temp_min - kelvin, 10).toFixed(2)} <span>&#x2103;</span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nClima.propTypes = {\r\n    resultado: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Clima;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Formulario from \"./components/Formulario\";\nimport Clima from \"./components/Clima\";\nimport Error from \"./components/Error\";\n\nfunction App() {\n  const [busqueda, setBusqueda] = useState({\n    ciudad: \"\",\n    pais: \"\",\n  });\n\n  const { ciudad, pais } = busqueda;\n\n  const [consultar, setConsultar] = useState(false);\n\n  const [resultado, setResultado] = useState({});\n\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const consultarAPI = async () => {\n      if (consultar) {\n        const appId = \"40393d0039528eb70ea46fbd6cc0c239\";\n        const url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n\n        const respuesta = await fetch(url);\n        const resultado = await respuesta.json();\n\n        setResultado(resultado);\n\n        setConsultar(false);\n\n        if (resultado.cod === \"404\") setError(true);\n        else setError(false);\n      }\n    };\n    consultarAPI();\n  }, [consultar]);\n\n  let componente;\n  if (error) {\n    componente = <Error mensaje=\"No hay resultados\"></Error>;\n  } else {\n    componente = <Clima resultado={resultado}></Clima>;\n  }\n\n  return (\n    <Fragment>\n      <Header titulo=\"Clima React App\"></Header>\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col m6 s12\">\n              <Formulario\n                setBusqueda={setBusqueda}\n                busqueda={busqueda}\n                setConsultar={setConsultar}\n              ></Formulario>\n            </div>\n            <div className=\"col m6 s12\">\n              {componente}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}